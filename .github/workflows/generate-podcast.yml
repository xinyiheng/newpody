name: Generate Podcast

on:
  schedule:
    - cron: '0 16 * * *'  # 在 UTC 16:00运行
  workflow_dispatch:      # 允许手动触发
  push:
    branches:
      - main  # 只在主分支上触发

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:         
      contents: write    
      issues: write     # 添加创建 issues 的权限
    
    steps:
    - uses: actions/checkout@v4  # 升级到 v4
      with:
        ref: gh-pages
        path: gh-pages
        
    - uses: actions/checkout@v4  # 升级到 v4
      with:
        path: main
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # 只缓存 pip 包
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('main/**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd main
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx ormsgpack pydantic

    - name: Generate podcast
      id: generate
      env:
        API_KEY: ${{ secrets.API_KEY }}
        FISH_API_KEY: ${{ secrets.FISH_API_KEY }}
      run: |
        cd main
        python scripts/generate_podcast.py

    # 添加提交缓存文件的步骤
    - name: Commit cache file
      if: steps.generate.outcome == 'success'
      run: |
        cd main
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add article_cache.json
        git commit -m "Update article cache" || echo "No changes to commit"
        git push origin main || echo "No changes to push"

    - name: Deploy to GitHub Pages
      run: |
        # 复制生成的播客文件到 gh-pages 分支
        echo "复制播客文件到 gh-pages 分支..."
        cp -r main/web/public/podcasts/* gh-pages/podcasts/
        cp main/web/public/podcast_index.json gh-pages/
        
        # 提交更改
        cd gh-pages
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update podcast content" || echo "No changes to commit"
        git push origin gh-pages || echo "No changes to push"

    - name: Update index.html to display highlights
      run: |
        echo "更新 index.html 以显示副标题..."
        cd gh-pages
        
        # 确保 index.html 中有显示副标题的代码
        if ! grep -q "podcast.highlight" index.html; then
          # 在标题后添加副标题显示
          sed -i 's/<h2 class="text-xl font-semibold"><\/h2>/<h2 class="text-xl font-semibold"><\/h2>\n                    <p class="text-gray-600 italic mt-1 text-sm highlight-text"><\/p>/' index.html
          
          # 添加设置副标题的代码
          sed -i 's/clone.querySelector("h2").textContent = podcast.title;/clone.querySelector("h2").textContent = podcast.title;\n                    clone.querySelector(".highlight-text").textContent = podcast.highlight || "探索出版行业的最新动态";/' index.html
          
          echo "已更新 index.html 以显示副标题"
          
          # 提交更改
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add index.html
          git commit -m "Add highlight display to index.html" || echo "No changes to commit"
          git push origin gh-pages || echo "No changes to push"
        else
          echo "index.html 已包含副标题显示代码，无需更新"
        fi

    - name: Send notification on failure
      if: steps.generate.outcome == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Podcast generation failed',
            body: `Workflow run: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
          })
    
    - name: Check files before deploy
      run: |
        echo "Checking files in public directory..."
        cd main/web/public
        ls -la
        echo "Checking podcasts directory..."
        ls -la podcasts || echo "podcasts directory not found"
        echo "Checking latest podcast..."
        ls -la podcasts/$(ls -t podcasts | head -n1) || echo "No podcasts found"
      