name: Generate Podcast

on:
  schedule:
    - cron: '0 21-22 * * *'  # 在 UTC 22:00 和 23:00 运行
  workflow_dispatch:      # 允许手动触发
  push:
    branches:
      - main  # 只在主分支上触发

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:         
      contents: write    
      issues: write     # 添加创建 issues 的权限
    
    steps:
    - uses: actions/checkout@v4  # 升级到 v4
      with:
        ref: gh-pages
        path: gh-pages
        
    - uses: actions/checkout@v4  # 升级到 v4
      with:
        path: main
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # 只缓存 pip 包
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('main/**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd main
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx ormsgpack pydantic

    - name: Generate podcast
      id: generate
      env:
        API_KEY: ${{ secrets.API_KEY }}
        FISH_API_KEY: ${{ secrets.FISH_API_KEY }}
      run: |
        cd main
        python scripts/generate_podcast.py

    # 添加提交缓存文件的步骤
    - name: Commit cache file
      if: steps.generate.outcome == 'success'
      run: |
        cd main
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add article_cache.json
        git commit -m "Update article cache" || echo "No changes to commit"
        git push origin main || echo "No changes to push"

    - name: Deploy to GitHub Pages
      run: |
        # 复制生成的播客文件到 gh-pages 分支
        echo "复制播客文件到 gh-pages 分支..."
        cp -r main/web/public/podcasts/* gh-pages/podcasts/
        cp main/web/public/podcast_index.json gh-pages/
        
        # 提交更改
        cd gh-pages
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update podcast content" || echo "No changes to commit"
        git push origin gh-pages || echo "No changes to push"

    - name: Update index.html to display highlights
      run: |
        echo "更新 index.html 以显示副标题..."
        cd gh-pages
        
        # 确保 index.html 中有显示副标题的代码
        if ! grep -q "podcast.highlight" index.html; then
          # 在标题后添加副标题显示
          sed -i 's/<h2 class="text-xl font-semibold"><\/h2>/<h2 class="text-xl font-semibold"><\/h2>\n                    <p class="text-gray-600 italic mt-1 text-sm highlight-text"><\/p>/' index.html
          
          # 添加设置副标题的代码
          sed -i 's/clone.querySelector("h2").textContent = podcast.title;/clone.querySelector("h2").textContent = podcast.title;\n                    clone.querySelector(".highlight-text").textContent = podcast.highlight || "探索出版行业的最新动态";/' index.html
          
          echo "已更新 index.html 以显示副标题"
          
          # 提交更改
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add index.html
          git commit -m "Add highlight display to index.html" || echo "No changes to commit"
          git push origin gh-pages || echo "No changes to push"
        else
          echo "index.html 已包含副标题显示代码，无需更新"
        fi

    - name: Send notification on failure
      if: steps.generate.outcome == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Podcast generation failed',
            body: `Workflow run: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
          })
    
    - name: Check files before deploy
      run: |
        echo "Checking files in public directory..."
        cd main/web/public
        ls -la
        echo "Checking podcasts directory..."
        ls -la podcasts || echo "podcasts directory not found"
        echo "Checking latest podcast..."
        ls -la podcasts/$(ls -t podcasts | head -n1) || echo "No podcasts found"
        
    # 添加部署到 Zeabur 的步骤
    - name: Setup Node.js for Zeabur CLI
      if: steps.generate.outcome == 'success'
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Deploy to Zeabur
      if: steps.generate.outcome == 'success'
      id: zeabur_deploy
      env:
        ZEABUR_TOKEN: ${{ secrets.ZEABUR_TOKEN }}
        ZEABUR_SERVICE_ID: ${{ secrets.ZEABUR_SERVICE_ID }}
      run: |
        # 安装 Zeabur CLI
        echo "Installing Zeabur CLI..."
        npm install -g @zeabur/cli
        
        # 检查版本
        echo "Checking Zeabur CLI version:"
        zeabur version
        
        # 验证 gh-pages 目录
        if [ ! -d "gh-pages" ]; then
          echo "Error: gh-pages directory not found!"
          exit 1
        fi
        
        # 显示将要部署的文件
        echo "Files to be deployed to Zeabur:"
        ls -la gh-pages
        
        echo "Deploying to Zeabur..."
        cd gh-pages
        
        # 设置更高的超时值
        export HTTP_TIMEOUT=900       # 15分钟超时
        export HTTP_RETRY=10          # 最多重试10次
        export HTTP_RETRY_WAIT=30     # 初始等待30秒
        export HTTP_MAX_RETRY_WAIT=300 # 最大等待5分钟
        
        # 尝试加速连接 (可选设置)
        export NODE_OPTIONS=--dns-result-order=ipv4first  # 优先使用IPv4
        
        # 诊断网络连接
        echo "Diagnosing network connection to Zeabur..."
        curl -v --connect-timeout 30 https://gateway.zeabur.com || true
        
        # 显示当前IP (帮助诊断潜在的IP限制)
        echo "Current IP address:"
        curl -s https://api.ipify.org || true
        
        # 使用指数退避策略设置项目上下文
        echo "Setting project context with exponential backoff..."
        MAX_RETRY=10
        RETRY_COUNT=0
        WAIT_TIME=10
        
        while [ $RETRY_COUNT -lt $MAX_RETRY ]; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          echo "Setting project context, attempt $RETRY_COUNT of $MAX_RETRY (waiting ${WAIT_TIME}s before timeout)"
          
          if timeout ${WAIT_TIME}s zeabur context set project --id "${{ secrets.ZEABUR_PROJECT_ID }}" -i=false; then
            echo "Project context set successfully!"
            break
          else
            # 指数退避：每次失败后等待时间翻倍，但不超过5分钟
            echo "Failed to set project context, retrying with exponential backoff..."
            sleep $WAIT_TIME
            WAIT_TIME=$((WAIT_TIME * 2))
            [ $WAIT_TIME -gt 300 ] && WAIT_TIME=300
          fi
          
          if [ $RETRY_COUNT -eq $MAX_RETRY ]; then
            echo "All attempts to set project context failed."
            echo "Warning: Failed to set context, will try deployment anyway"
          fi
        done
        
        # 使用指数退避策略进行部署 - 更新到现有服务而不是创建新服务
        echo "Deploying to existing service with exponential backoff strategy..."
        DEPLOY_RETRY=8
        DEPLOY_COUNT=0
        DEPLOY_WAIT=15
        
        while [ $DEPLOY_COUNT -lt $DEPLOY_RETRY ]; do
          DEPLOY_COUNT=$((DEPLOY_COUNT+1))
          echo "Deployment attempt $DEPLOY_COUNT of $DEPLOY_RETRY (timeout: ${DEPLOY_WAIT}s)"
          
          # 尝试多种部署方式 - 使用服务ID直接部署
          echo "Attempting to deploy using service ID..."
          if timeout ${DEPLOY_WAIT}s zeabur deploy --service-id "${ZEABUR_SERVICE_ID}" -i=false; then
            echo "Deployment succeeded using service ID!"
            break
          fi
          
          # 如果使用服务ID失败，尝试使用正确的服务名称 "public" 进行更新
          echo "Attempting to deploy using service name 'public'..."
          if timeout ${DEPLOY_WAIT}s zeabur deploy --name "public" --update -i=false; then
            echo "Deployment succeeded using service name 'public'!"
            break
          fi
          
          # 如果使用服务ID失败，尝试使用之前的服务名称(兼容性)
          echo "Attempting to deploy using service name 'podcast-static-site'..."
          if timeout ${DEPLOY_WAIT}s zeabur deploy --name "podcast-static-site" --update -i=false; then
            echo "Deployment succeeded using service name 'podcast-static-site'!"
            break
          fi
          
          # 如果以上方法都失败，尝试在没有标志的情况下部署
          echo "Attempting to deploy with no specific flags..."
          if timeout ${DEPLOY_WAIT}s zeabur deploy -i=false; then
            echo "Deployment succeeded with no specific flags!"
            break
          else
            # 指数退避：等待时间翻倍，但不超过5分钟
            echo "Deployment failed, retrying with exponential backoff..."
            sleep $DEPLOY_WAIT
            DEPLOY_WAIT=$((DEPLOY_WAIT * 2))
            [ $DEPLOY_WAIT -gt 300 ] && DEPLOY_WAIT=300
            
            # 确保项目上下文仍然有效
            echo "Re-checking project context..."
            zeabur context set project --id "${{ secrets.ZEABUR_PROJECT_ID }}" -i=false || true
          fi
          
          if [ $DEPLOY_COUNT -eq $DEPLOY_RETRY ]; then
            echo "All deployment attempts failed."
            
            # 最后尝试发送简单的 HTTP POST 请求进行部署
            echo "Attempting direct API deployment as last resort..."
            curl -v -X POST "https://gateway.zeabur.com/api/v1/services/${ZEABUR_SERVICE_ID}/redeploy" \
              -H "Authorization: Bearer ${ZEABUR_TOKEN}" \
              -H "Content-Type: application/json" || true
            
            # 如果所有尝试都失败，则退出错误
            exit 1
          fi
        done
        
        echo "✅ Deployment to Zeabur completed successfully"
      continue-on-error: true
    
    - name: Report Zeabur Deployment Status
      if: always() && steps.zeabur_deploy.outcome != 'skipped'
      run: |
        if [ "${{ steps.zeabur_deploy.outcome }}" == "success" ]; then
          echo "🎉 Zeabur deployment was successful!"
          echo "Your site should be available at your Zeabur domain shortly"
        else
          echo "❌ Zeabur deployment failed. Please check the logs above for details."
          
          echo "Recommendations:"
          echo "1. 检查您的 ZEABUR_SERVICE_ID 密钥是否已正确设置"
          echo "2. 访问 Zeabur 控制台，检查服务状态并尝试手动更新"
          echo "3. 如果网络问题持续存在，考虑以下替代方案："
          echo "   - 使用自托管的 GitHub Actions 运行器，放置在与 Zeabur 相同区域"
          echo "   - 使用第三方 CD 服务，如 Netlify 或 Vercel"
        fi
